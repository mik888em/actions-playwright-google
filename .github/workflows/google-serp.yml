name: Playwright Google SERP

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Режим: google или demo'
        required: true
        default: 'demo'
      query:
        description: 'Запрос для Google (используется при mode=google)'
        required: false
        default: 'site:example.com'
      url:
        description: 'URL для демо-скрапинга (используется при mode=demo)'
        required: false
        default: 'https://cryptopanic.com'
  schedule:
    - cron: "*/7 * * * *"   # каждые 7 минут

permissions:
  contents: read
    
jobs:
  serp:
    timeout-minutes: 35
    runs-on: ubuntu-latest

    # <<< ВСТАВКА: job-level concurrency (вариант A — ставим в очередь, НЕ отменяем) >>>
    concurrency:
      group: serp-schedule
      cancel-in-progress: false
    # <<< КОНЕЦ ВСТАВКИ >>>

    # <<< ВСТАВКА №1 (ЯКОРЬ: сразу ПОСЛЕ 'timeout-minutes: 10') >>>
    env:
      # Путь к распакованному расширению в вашем репозитории.
      # Папка должна содержать manifest.json, например:
      #   extensions/unblock-origin-lite/manifest.json
      EXTENSION_DIR: ${{ github.workspace }}/extensions/unblock-origin-lite
      GAS_WEBHOOK_URL: ${{ secrets.GAS_WEBHOOK_URL }}
      GAS_PASSWORD:    ${{ secrets.GAS_PASSWORD }}
    # <<< КОНЕЦ ВСТАВКИ №1 >>>

    steps:
      - name: Checkout (force main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-playwright.txt
          python -m playwright install --with-deps chromium

      - name: Show repo tree (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la
          echo "----- find (maxdepth 3) -----"
          find . -maxdepth 3 -type f -print | sort
          echo "----- check files exist -----"
          test -f ./scripts/google_serp_playwright.py && echo "OK: google_serp_playwright.py"
          test -f ./scripts/demo_playwright.py && echo "OK: demo_playwright.py" || echo "demo_playwright.py (опционально, для mode=demo)"
          echo "----- extension dir -----"
          echo "EXTENSION_DIR=$EXTENSION_DIR"
          if [ -d "$EXTENSION_DIR" ]; then
            echo "Found extension at $EXTENSION_DIR"
          else
            echo "Extension dir not found (будет headless-режим без расширения)"
          fi

      - name: Jitter 0–300s (только для schedule)
        if: ${{ github.event_name == 'schedule' }}
        run: sleep $((RANDOM % 301))

      # <<< ВСТАВКА №2 (ЯКОРЬ: заменить СУЩЕСТВУЮЩИЙ шаг 'Run scraper') >>>
      - name: Run scraper (with heartbeat)
        env:
          MODE: ${{ github.event.inputs.mode || 'demo' }}
          QUERY: ${{ github.event.inputs.query || 'site:example.com' }}
          URL: ${{ github.event.inputs.url || 'https://cryptopanic.com' }}
          EXTENSION_DIR: ${{ github.workspace }}/extensions/unblock-origin-lite
          # Дополнительно даём побольше логов от Playwright (необязательно, но помогает избежать "тишины")
          DEBUG: pw:api
        run: |
          set -euo pipefail
          echo "MODE=$MODE"
          echo "EXTENSION_DIR=$EXTENSION_DIR"
      
          # Каждые ~55с пишем строку в лог, чтобы GitHub не отменял шаг из-за отсутствия вывода
          ( while true; do echo "⏳ still running at $(date -u +"%H:%M:%S")"; sleep 55; done ) &
          HEARTBEAT_PID=$!
          trap 'kill $HEARTBEAT_PID || true' EXIT
      
          if [ "$MODE" = "demo" ]; then
            # -u включает небуферизованный вывод Python (ещё меньше шансов "замолчать")
            xvfb-run -a python -u ./scripts/demo_playwright.py
          else
            xvfb-run -a python -u ./scripts/google_serp_playwright.py
          fi
      # <<< КОНЕЦ ВСТАВКИ №2 >>>

      - name: Upload artifacts (JSON + screenshot)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: google-serp-output
          path: out/
